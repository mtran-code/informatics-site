{"title":"Linear Regression in R","markdown":{"yaml":{"title":"Linear Regression in R"},"headingText":"Linear and Polynomial Regression","containsRefs":false,"markdown":"\n\n\nA\n```{r}\n# setup libraries\nlibrary(ggplot2)\n\n# read in first dataset into dataframe\nx_tr <- read.delim(file = \"data/hw1xtr.dat\", header = FALSE, col.names = \"x_tr\")\ny_tr <- read.delim(file = \"data/hw1ytr.dat\", header = FALSE, col.names = \"y_tr\")\ndf_tr <- data.frame(x_tr, y_tr)\n\n# read in second dataset into dataframe\nx_te <- read.delim(file = \"data/hw1xte.dat\", header = FALSE, col.names = \"x_te\")\ny_te <- read.delim(file = \"data/hw1yte.dat\", header = FALSE, col.names = \"y_te\")\ndf_te <- data.frame(x_te, y_te)\n\n# plot training dataset\nplt_tr <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    labs(title = \"Training data\") +\n    theme_light()\nplt_tr\n\n# plot test dataset\nplt_te <- ggplot(df_te, aes(x = x_te, y = y_te)) +\n    geom_point() +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    labs(title = \"Testing data\") +\n    theme_light()\nplt_te\n```\n\nB\n```{r}\n# convert training outputs to matrix\ny_tr_mat <- as.matrix(y_tr)\n\n# add column of 1s to training features\nx_tr_1 <- cbind(x_tr, b = rep(1, length(x_tr)))\nx_tr_1 <- as.matrix(x_tr_1)\n\n# solve for weight vector using training features\nw <- solve(t(x_tr_1) %*% x_tr_1) %*% (t(x_tr_1) %*% y_tr_mat)\n\n# plot linear regression on training set\nplt_tr_1 <- ggplot(data = df_tr, mapping = aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_1\n\n# compute average training error\neq_tr_1 <- t(as.data.frame(t(w) %*% t(x_tr_1)))\nerrors_tr_1 <- (eq_tr_1 - y_tr_mat)**2\nerr_avg_tr_1 <- colSums(errors_tr_1) / length(errors_tr_1)\nerr_avg_tr_1\n```\nThe average error of the training set using the linear regression model is 2.287073.\n\nC\n```{r}\n# convert training outputs to matrix\ny_te_mat <- as.matrix(y_te)\n\n# add column of 1s to testing features\nx_te_1 <- cbind(x_te, b = rep(1, length(x_te)))\nx_te_1 <- as.matrix(x_te_1)\n\n# plot linear regression on test set\nplt_te_1 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_1\n\n\n# compute average test error using same weight vector from training data\neq_te_1 <- t(as.data.frame(t(w) %*% t(x_te_1)))\nerrors_te_1 <- (eq_te_1 - y_te_mat)**2\nerr_avg_te_1 <- colSums(errors_te_1) / length(errors_te_1)\nerr_avg_te_1\n\n# store average errors:\nerrs <- data.frame(\n    \"training\" = err_avg_tr_1,\n    \"testing\" = err_avg_te_1,\n    row.names = \"order1\"\n)\n```\nThe average error of the testing set using the linear regression model is 9.427358.\n\nD\n```{r}\n# add second order polynomial to features\nx_tr_2 <- as.matrix(x_tr_1[, 1]**2)\nx_tr_2 <- cbind(x_tr_2, x_tr_1)\n\n# compute weight vector\nw2 <- solve(t(x_tr_2) %*% x_tr_2) %*% (t(x_tr_2) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_2 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_2\n\n# compute average training error\neq_tr_2 <- t(as.data.frame(t(w2) %*% t(x_tr_2)))\nerrors_tr_2 <- (eq_tr_2 - y_tr_mat)**2\nerr_avg_tr_2 <- colSums(errors_tr_2) / length(errors_tr_2)\nerr_avg_tr_2\n\n# add columns to testing features\nx_te_2 <- as.matrix(x_te_1[, 1]**2)\nx_te_2 <- cbind(x_te_2, x_te_1)\n\n# plot polynomial regression on test set\nplt_te_2 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_2\n\n# compute average testing error using same weight vector from training data\neq_te_2 <- t(as.data.frame(t(w2) %*% t(x_te_2)))\nerrors_te_2 <- (eq_te_2 - y_te_mat)**2\nerr_avg_te_2 <- colSums(errors_te_2) / length(errors_te_2)\nerr_avg_te_2\n\n# store average errors\nerrs <- rbind(errs, order2 = c(err_avg_tr_2, err_avg_te_2))\nerrs\n```\nComparing the training error and test error, this second order polynomial regression model performs worse than the linear model, with a better training fit but a worse testing fit. Thus, the linear regression model is a better fit.\n\n\nE\n```{r}\n# add third order polynomial to features\nx_tr_3 <- as.matrix(x_tr_1[, 1]**3)\nx_tr_3 <- cbind(x_tr_3, x_tr_2)\n\n# compute weight vector\nw3 <- solve(t(x_tr_3) %*% x_tr_3) %*% (t(x_tr_3) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_3 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_3\n\n# compute average training error\neq_tr_3 <- t(as.data.frame(t(w3) %*% t(x_tr_3)))\nerrors_tr_3 <- (eq_tr_3 - y_tr_mat)**2\nerr_avg_tr_3 <- colSums(errors_tr_3) / length(errors_tr_3)\nerr_avg_tr_3\n\n# add columns to testing features\nx_te_3 <- as.matrix(x_te_1[, 1]**3)\nx_te_3 <- cbind(x_te_3, x_te_2)\n\n# plot polynomial regression on test set\nplt_te_3 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_3\n\n# compute average testing error using same weight vector from training data\neq_te_3 <- t(as.data.frame(t(w3) %*% t(x_te_3)))\nerrors_te_3 <- (eq_te_3 - y_te_mat)**2\nerr_avg_te_3 <- colSums(errors_te_3) / length(errors_te_3)\nerr_avg_te_3\n\n# store average errors\nerrs <- rbind(errs, order3 = c(err_avg_tr_3, err_avg_te_3))\nerrs\n```\nThis time, the training error has improved much more than with the second order model. In addition, the testing error has also dramatically improved, even better than our original best linear regression model. Overall, this third order polynomial regression is a better fit than both the linear and second order models.\n\nF\n```{r}\n# add fourth order polynomial to features\nx_tr_4 <- as.matrix(x_tr_1[, 1]**4)\nx_tr_4 <- cbind(x_tr_4, x_tr_3)\n\n# compute weight vector\nw4 <- solve(t(x_tr_4) %*% x_tr_4) %*% (t(x_tr_4) %*% y_tr_mat)\neq_tr_4 <- t(as.data.frame(t(w4) %*% t(x_tr_4)))\n\n# plot polynomial regression on training set\nplt_tr_4 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_4\n\n# compute average training error\nerrors_tr_4 <- (eq_tr_4 - y_tr_mat)**2\nerr_avg_tr_4 <- colSums(errors_tr_4) / length(errors_tr_4)\nerr_avg_tr_4\n\n# add columns to testing features\nx_te_4 <- as.matrix(x_te_1[, 1]**4)\nx_te_4 <- cbind(x_te_4, x_te_3)\n\n# equation using same weight vector from training data\neq_te_4 <- t(as.data.frame(t(w4) %*% t(x_te_4)))\n\n# plot polynomial regression on test set\nplt_te_4 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_4\n\n# compute average testing error using same weight vector from training data\nerrors_te_4 <- (eq_te_4 - y_te_mat)**2\nerr_avg_te_4 <- colSums(errors_te_4) / length(errors_te_4)\nerr_avg_te_4\n\n# store average errors\nerrs <- rbind(errs, order4 = c(err_avg_tr_4, err_avg_te_4))\nerrs\n```\nUsing fourth order polynomial regression, our training error has slightly improved, however, the testing error has slightly gotten worse, by a larger amount. While it is close to the third order polynomial regression, overall the data has become slightly overfitted, and so the best model for fitting our data is the third order polynomial regression model.\n\n# Regularization and Cross-Validation\n\nA\n```{r}\n# create identity matrix with 0 at position (1, 1)\ni_hat <- diag(nrow(w4))\ni_hat[1, 1] <- 0\n\n# function calculating training error in terms of lambda\nl2_error_tr <- function(lambda) {\n    l <- 0.5 * norm(x_tr_4 %*% w4 - y_tr_mat)^2 +\n        lambda / 2 * t(w4) %*% i_hat %*% w4\n    return(l)\n}\n# function calculating testing error in terms of lambda\nl2_error_te <- function(lambda) {\n    l <- 0.5 * norm(x_te_4 %*% w4 - y_te_mat)^2 +\n        lambda / 2 * t(w4) %*% i_hat %*% w4\n    return(l)\n}\n\n# calculate values based on given lambdas\nlambdas <- c(0.01, 0.05, 0.1, 0.5, 1, 100, 10^6)\nl2_tr <- sapply(lambdas, l2_error_tr)\nl2_te <- sapply(lambdas, l2_error_te)\n\n# save to dataframe\ndf_l2 <- data.frame(lambdas, l2_tr, l2_te)\ndf_l2\n\n# plot data\nplt_reg <- ggplot() +\n    geom_point(\n        data = df_l2,\n        mapping = aes(x = lambdas, y = l2_tr, color = \"training\")\n    ) +\n    stat_function(fun = l2_error_tr, mapping = aes(color = \"training\")) +\n    geom_point(\n        data = df_l2,\n        mapping = aes(x = lambdas, y = l2_te, color = \"testing\"),\n    ) +\n    stat_function(fun = l2_error_te, mapping = aes(color = \"testing\")) +\n    scale_color_manual(\n        name = \"Dataset\",\n        values = c(\n            training = \"red\",\n            testing = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    scale_y_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"log10 error\") +\n    theme_light()\nplt_reg\n```\nThe smallest lambda value, 0.01, seems to minimize the l2-normalized loss for both the training and testing data with the minimized lambda value. At smaller lambda values, the testing error is greater than the training data, but as they get larger this difference is less visible.\n\nB\n```{r}\n# function of training weight in terms of lambda\nl2_w_tr <- function(lambda) {\n    w <- solve(t(x_tr_4) %*% x_tr_4 + lambda * i_hat) %*% t(x_tr_4) %*% y_tr_mat\n    return(w)\n}\n# compute weights based on lambdas\nw_tr <- sapply(lambdas, l2_w_tr)\n\n# create dataframe to plot data\ncols <- c(\"lambdas\", \"x4.term\", \"x3.term\", \"x2.term\", \"x.term\", \"bias.term\")\ndf_w_tr <- data.frame(lambdas, t(w_tr))\ncolnames(df_w_tr) <- cols\n\n# plot training weights\nplt_w_tr <- ggplot() +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x4.term, color = \"x4\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x3.term, color = \"x3\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x2.term, color = \"x2\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x.term, color = \"x\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = bias.term, color = \"bias\")\n    ) +\n    scale_color_manual(\n        name = \"weight parameter\",\n        values = c(\n            x4 = \"red\",\n            x3 = \"orange\",\n            x2 = \"purple\",\n            x = \"darkgreen\",\n            bias = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"weight parameter value\") +\n    theme_light()\nplt_w_tr\n\n# function of testing weight in terms of lambda\nl2_w_te <- function(lambda) {\n    w <- solve(t(x_te_4) %*% x_te_4 + lambda * i_hat) %*% t(x_te_4) %*% y_te_mat\n    return(w)\n}\n\n# compute testing weights\nw_te <- sapply(lambdas, l2_w_te)\n\n# create dataframe to plot data\ndf_w_te <- data.frame(lambdas, t(w_te))\ncolnames(df_w_te) <- cols\n\n# plot testing weights in terms of lambda\nplt_w_te <- ggplot() +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x4.term, color = \"x4\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x3.term, color = \"x3\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x2.term, color = \"x2\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x.term, color = \"x\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = bias.term, color = \"bias\")\n    ) +\n    scale_color_manual(\n        name = \"weight parameter\",\n        values = c(\n            x4 = \"red\",\n            x3 = \"orange\",\n            x2 = \"purple\",\n            x = \"darkgreen\",\n            bias = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"weight parameter value\") +\n    theme_light()\nplt_w_te\n```\nNote: Data is plotted as discrete based on specifed lambda values.\n\nC\n```{r}\n# store training data into single dataframe\ntrain <- data.frame(x_tr_4, y_tr_mat)\n# shuffle the rows randomly\ntrain <- train[sample(nrow(train)), ]\n# split the data into 5 equal groups of 8, in a list\ngroups <- cut(seq_len(nrow(train)), breaks = 5, labels = FALSE)\ntrain_groups <- split(train, groups)\ntrain_groups\n\n# loop for each run\nfor (run in 1:5) {\n    # designate datasets\n    validation_set <- train_groups[[run]]\n    training_set <- do.call(rbind, train_groups[-run])\n    x <- as.matrix(training_set[1:5])\n    y <- as.matrix(training_set[6])\n\n    # compute weight vector\n    w <- solve(t(x) %*% x) %*% (t(x) %*% y)\n\n    # create identity matrix with 0 at position (1, 1)\n    i_hat <- diag(nrow(w))\n    i_hat[1, 1] <- 0\n\n    # function calculating validation error in terms of lambda\n    l2_error <- function(lambda) {\n        l <- 0.5 * norm(\n            as.matrix(validation_set[1:5]) %*% w - as.matrix(validation_set[6])\n        )^2 + lambda / 2 * t(w) %*% i_hat %*% w\n        return(l)\n    }\n\n    # plot data\n    plt <- ggplot() +\n        stat_function(fun = l2_error) +\n        scale_x_log10() +\n        labs(\n            title = paste0(\"Run \", run),\n            x = \"log10 lambda\",\n            y = \"error\",\n        ) +\n        ylim(0, 2000) +\n        theme_light()\n    print(plt)\n}\n```\nWe can see slight variation in each figure, but the trend remains the same: the error has a positive correlation with lambda, thus minimizing lambda seems to be the best fit for our data. This is the same trend seen previously.\n\n```{r}\n# plot 4th order polynomial regression on test set\nplt_te_4 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_4\n```\nThe best fit 4th order polynomial regression plot.\n\n# Addition\nResponse to Question 1d, in Refreshing Mathematics\n```{r}\nlibrary(rgl)\n\n# Define A and B matrices\nA <- matrix(c(2, -2, -2, 3), nrow = 2)\nB <- matrix(c(2, -1, -1, 2), nrow = 2)\n\n# Define the function to plot\nf <- function(w) {\n  return(sum(diag(B %*% w %*% t(w) %*% A)))\n}\n\n# Generate a grid of (x, y) points\nx <- seq(-1, 1, length.out = 50)\ny <- seq(-1, 1, length.out = 50)\ngrid <- expand.grid(x, y)\n\n# Evaluate the function at each (x, y) point\nz <- apply(grid, 1, function(w) f(as.matrix(w)))\n\n# Create the 3D plot\nz <- matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE)\npersp3d(x, y, z, col = heat.colors(1000))\n\n```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"linreg.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","theme":"cosmo","title":"Linear Regression in R"},"extensions":{"book":{"multiFile":true}}}}}