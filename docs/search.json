[
  {
    "objectID": "pages/ai/regression.html",
    "href": "pages/ai/regression.html",
    "title": "Simple Regression",
    "section": "",
    "text": "Important\n\n\n\nThis page is currently under construction, and being slowly updated with better explanations and formatting.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#background",
    "href": "pages/ai/regression.html#background",
    "title": "Simple Regression",
    "section": "Background",
    "text": "Background\nIn supervised learning, our input variables, also called features, are used in order to predict an output variable, also called a label. There are different types of output variables that we may be interested in, which would fall under the category of regression or classification. In regression problems, we are interested in predicting a continuous output variable, whereas in classification problems, we are interested in predicting a discrete output variable. In this exercise, we will be working with a regression problem, where we are interested in predicting a continuous output variable.\n\n\n\n\n\n\nOutput variable examples\n\n\n\n\n\nIn a classification problem, we might input features based on tumour width and height, and predict whether or not the tumour is malignant or benign. The output variable in this case would be a discrete variable, either 0 or 1, where 0 represents benign and 1 represents malignant.\nIn a regression problem, we might input features based on gene expression levels of several other genes, and predict the gene expression level of a specific gene of interest. The output variable in this case would be a continuous variable, where the gene expression level is represented by a floating point number.\nIn each of these types of problems, the input variables can be anything (continuous or discrete), but the type of output variable will determine whether or not the problem is a regression or classification problem.\n\n\n\n\n\n\n\n\n\nOther supervised learning problems\n\n\n\n\n\nWhile classification and regression are the most commonly seen supervised learning problems, other supervised learning problems include:\n\nRanking: Predicting the order of a set of items.\nSequence labeling: Assigning a label to each element in a sequence of inputs.\nStructured prediction: Predicting a structured output, such as a sequence, tree, or graph.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#model-solving",
    "href": "pages/ai/regression.html#model-solving",
    "title": "Simple Regression",
    "section": "Model Solving",
    "text": "Model Solving\nWe’ll work with the training data only for now, as once we have a weights vector and a completed model, we can then use the testing data to evaluate the model. To relate our data to the linear regression model, we first have to add the column vector of 1’s to the features to account for the bias term.\n\n# Add column of 1's to training features\n1x_tr_1 &lt;- cbind(\n2    x_tr,\n3    b = rep(1, length(x_tr))\n)\n\n\n1\n\nCreate a new variable, x_tr_1, that is the result of the cbind function. This function takes vectors (or dataframes) and combines them by their columns, hence the name cbind for column bind. We will want to combine our original features with a column of 1’s of the same length.\n\n2\n\nSpecify our first vector to combine, x_tr. This is the original training features vector.\n\n3\n\nThe second vector to combine will be a column containing just ones of the same length as our orignal vector. We start with b = to name our column consistently with the formula. We can create this column of 1’s on the fly (instead of manually) by using the rep function. The rep function takes a value and repeats it a specified number of times. In this case, we want to repeat the value 1, length(x_tr) times. The length function returns the length of a vector, in this case the number of elements in x_tr.\n\n\n\n\nNow x_tr_1 looks like this:\n\nhead(x_tr_1)\n\n       x_tr b\n1 3.1381904 1\n2 3.4421490 1\n3 1.3083408 1\n4 0.9954419 1\n5 3.2414549 1\n6 2.8537392 1\n\n\n\n\n\n\n\n\nLike with our _tr suffix, I use the _1 suffix to represent variables for linear regression. Later on I’ll be using other regression models such as _2 for second-order polynomial regression, _3 for third-order, etc.\n\n\n\nNow that we have our training features with the bias term included, we can use the training labels to solve for the weights vector by rearranging the linear regression formula. Using matrix algebra, we derive the formula for solving for the weights vector:\n\\[w = (X^\\top X)^{-1} X^\\top y\\]\nwhere \\(X\\) is the matrix form of training features, \\(y\\) is the vector of training labels, and \\(w\\) is the vector of weights. The \\(X^\\top\\) notation is the transpose of \\(X\\), and the \\(X^{-1}\\) notation is the inverse of \\(X\\). The inverse of a matrix is a matrix that when multiplied by the original matrix, results in the identity matrix. The identity matrix is a square matrix with 1’s on the diagonal and 0’s everywhere else. The identity matrix is the multiplicative identity, meaning that when multiplied by any matrix, the result is the original matrix. The inverse of a matrix is the multiplicative inverse, meaning that when multiplied by the original matrix, the result is the identity matrix.\nMatrix operations are available in base R, including %*% for matrix multiplication, t for transposing a matrix, and solve for solving a matrix equation. When solve is only provided one parameter, it solves for the inverse of the input matrix. We can use these functions to solve for the weights vector.\n\n# Convert training dataframes to matrices\n1y_tr_mat &lt;- as.matrix(y_tr)\nx_tr_1 &lt;- as.matrix(x_tr_1)\n\n# Solve for weight vector using training data\n2w &lt;- solve(t(x_tr_1) %*% x_tr_1) %*% (t(x_tr_1) %*% y_tr_mat)\n\n\n1\n\nTo perform matrix operations on our dataframes, we need to first convert them to matrices. We can do this using the as.matrix function. I rename y_tr to y_tr_mat to store its matrix variable separately, since it will be reused later on in the code.\n\n2\n\nSolve for w using the formula above, with x_tr_1 as X and y_tr_mat as y. We use the %*% operator for matrix multiplication, the solve function to solve for the inverse of a matrix, and the t function to transpose a matrix. The brackets are there to visually support the order of operations.\n\n\n\n\nNow that we have our weights vector \\(w\\), the full linear regression formula is complete and we can plot the resulting function on top of our training data.\n\n# Plot linear regression on training set\n1plt_tr_1 &lt;- ggplot(\n2    data = df_tr,\n3    mapping = aes(x = x_tr, y = y_tr)\n) +\n4    geom_point() +\n5    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n6    xlim(0, 4) +\n    ylim(0, 30) +\n7    theme_light()\n\n8plt_tr_1\n\n\n1\n\nCreate a ggplot object for the linear regression over the training data.\n\n2\n\nParameter data specifies the dataframe to use for the plot. We’re using the training data dataframe.\n\n3\n\nParameter mapping specifies the mapping of the dataframe columns to the plot axes, i.e. what our x variable and y variable are in terms of column names. These go in the aes function, for specifying aesthetics of the plot.\n\n4\n\nSpecify the plot type; geom_point is a basic scatter plot, ideal for plotting individual data points. Using geom_scatter could also work here.\n\n5\n\nSpecify another plot type (alongside geom_point). Additional plot types can be added to render on top of the main data (the training data). Here we are plotting a function using stat_function by passing in the function as paramter fun. The function is created in y = mx + b format from our weights vector w, so function of x is w[1] * x + w[2] where w[1] is the slope m and w[2] is the y-intercept b. The function is plotted over the range of the training data, which is why we don’t need to specify x in the stat_function function.\n\n6\n\nSet the x and y axis limits. This is optional, but I’m specifying them to manually the plots limits rather than auto-detecting.\n\n7\n\nSet the plot theme.\n\n8\n\nDisplay the plot.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#average-error",
    "href": "pages/ai/regression.html#average-error",
    "title": "Simple Regression",
    "section": "Average Error",
    "text": "Average Error\n\n# compute average training error\neq_tr_1 &lt;- t(as.data.frame(t(w) %*% t(x_tr_1)))\nerrors_tr_1 &lt;- (eq_tr_1 - y_tr_mat)**2\nerr_avg_tr_1 &lt;- colSums(errors_tr_1) / length(errors_tr_1)\nerr_avg_tr_1\n\n    y_tr \n2.143112 \n\n\nThe average error of the training set using the linear regression model is 2.287073.\nPlot both the regression line and the test data on the same graph. Also report the average error on the test set using Eq. (1).\n\n# convert training outputs to matrix\ny_te_mat &lt;- as.matrix(y_te)\n\n# add column of 1s to testing features\nx_te_1 &lt;- cbind(x_te, b = rep(1, length(x_te)))\nx_te_1 &lt;- as.matrix(x_te_1)\n\n# plot linear regression on test set\nplt_te_1 &lt;- ggplot(\n    data = df_te,\n    mapping = aes(x = x_te, y = y_te)\n) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_1\n\n\n\n\n\n\n\n# compute average test error using same weight vector from training data\neq_te_1 &lt;- t(as.data.frame(t(w) %*% t(x_te_1)))\nerrors_te_1 &lt;- (eq_te_1 - y_te_mat)**2\nerr_avg_te_1 &lt;- colSums(errors_te_1) / length(errors_te_1)\nerr_avg_te_1\n\n    y_tr \n9.973294 \n\n# store average errors:\nerrs &lt;- data.frame(\n    \"training\" = err_avg_tr_1,\n    \"testing\" = err_avg_te_1,\n    row.names = \"order1\"\n)\n\nThe average error of the testing set using the linear regression model is 9.427358.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#second-order-polynomial",
    "href": "pages/ai/regression.html#second-order-polynomial",
    "title": "Simple Regression",
    "section": "Second Order Polynomial",
    "text": "Second Order Polynomial\nImplement the 2nd-order polynomial regression by adding new features x2 to the inputs. Repeat (b) and (c). Compare the training error and test error. Is it a better fit than linear regression?\n\n# add second order polynomial to features\nx_tr_2 &lt;- as.matrix(x_tr_1[, 1]**2)\nx_tr_2 &lt;- cbind(x_tr_2, x_tr_1)\n\n# compute weight vector\nw2 &lt;- solve(t(x_tr_2) %*% x_tr_2) %*% (t(x_tr_2) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_2 &lt;- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_2\n\n\n\n\n\n\n\n# compute average training error\neq_tr_2 &lt;- t(as.data.frame(t(w2) %*% t(x_tr_2)))\nerrors_tr_2 &lt;- (eq_tr_2 - y_tr_mat)**2\nerr_avg_tr_2 &lt;- colSums(errors_tr_2) / length(errors_tr_2)\nerr_avg_tr_2\n\n   y_tr \n1.98476 \n\n# add columns to testing features\nx_te_2 &lt;- as.matrix(x_te_1[, 1]**2)\nx_te_2 &lt;- cbind(x_te_2, x_te_1)\n\n# plot polynomial regression on test set\nplt_te_2 &lt;- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_2\n\n\n\n\n\n\n\n# compute average testing error using same weight vector from training data\neq_te_2 &lt;- t(as.data.frame(t(w2) %*% t(x_te_2)))\nerrors_te_2 &lt;- (eq_te_2 - y_te_mat)**2\nerr_avg_te_2 &lt;- colSums(errors_te_2) / length(errors_te_2)\nerr_avg_te_2\n\n    y_tr \n12.16348 \n\n# store average errors\nerrs &lt;- rbind(errs, order2 = c(err_avg_tr_2, err_avg_te_2))\nerrs\n\n       training   testing\norder1 2.143112  9.973294\norder2 1.984760 12.163477\n\n\nComparing the training error and test error, this second order polynomial regression model performs worse than the linear model, with a better training fit but a worse testing fit. Thus, the linear regression model is a better fit.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#third-order-polynomial",
    "href": "pages/ai/regression.html#third-order-polynomial",
    "title": "Simple Regression",
    "section": "Third Order Polynomial",
    "text": "Third Order Polynomial\nImplement the 3rd-order polynomial regression by adding new features x2,x3 to the inputs. Repeat (b) and (c). Compare the training error and test error. Is it a better fit than linear regression and 2nd-order polynomial regression?\n\n# add third order polynomial to features\nx_tr_3 &lt;- as.matrix(x_tr_1[, 1]**3)\nx_tr_3 &lt;- cbind(x_tr_3, x_tr_2)\n\n# compute weight vector\nw3 &lt;- solve(t(x_tr_3) %*% x_tr_3) %*% (t(x_tr_3) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_3 &lt;- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_3\n\n\n\n\n\n\n\n# compute average training error\neq_tr_3 &lt;- t(as.data.frame(t(w3) %*% t(x_tr_3)))\nerrors_tr_3 &lt;- (eq_tr_3 - y_tr_mat)**2\nerr_avg_tr_3 &lt;- colSums(errors_tr_3) / length(errors_tr_3)\nerr_avg_tr_3\n\n     y_tr \n0.8850264 \n\n# add columns to testing features\nx_te_3 &lt;- as.matrix(x_te_1[, 1]**3)\nx_te_3 &lt;- cbind(x_te_3, x_te_2)\n\n# plot polynomial regression on test set\nplt_te_3 &lt;- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_3\n\n\n\n\n\n\n\n# compute average testing error using same weight vector from training data\neq_te_3 &lt;- t(as.data.frame(t(w3) %*% t(x_te_3)))\nerrors_te_3 &lt;- (eq_te_3 - y_te_mat)**2\nerr_avg_te_3 &lt;- colSums(errors_te_3) / length(errors_te_3)\nerr_avg_te_3\n\n    y_tr \n2.715822 \n\n# store average errors\nerrs &lt;- rbind(errs, order3 = c(err_avg_tr_3, err_avg_te_3))\nerrs\n\n        training   testing\norder1 2.1431122  9.973294\norder2 1.9847596 12.163477\norder3 0.8850264  2.715822\n\n\nThis time, the training error has improved much more than with the second order model. In addition, the testing error has also dramatically improved, even better than our original best linear regression model. Overall, this third order polynomial regression is a better fit than both the linear and second order models.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "pages/ai/regression.html#fourth-order-polynomial",
    "href": "pages/ai/regression.html#fourth-order-polynomial",
    "title": "Simple Regression",
    "section": "Fourth Order Polynomial",
    "text": "Fourth Order Polynomial\nImplement the 4th-order polynomial regression by adding new features x2,x3,x4 to the inputs. Repeat (b) and (c). Compare the training error and test error. Compared with the previous results, which order is the best for fitting the data?\n\n# add fourth order polynomial to features\nx_tr_4 &lt;- as.matrix(x_tr_1[, 1]**4)\nx_tr_4 &lt;- cbind(x_tr_4, x_tr_3)\n\n# compute weight vector\nw4 &lt;- solve(t(x_tr_4) %*% x_tr_4) %*% (t(x_tr_4) %*% y_tr_mat)\neq_tr_4 &lt;- t(as.data.frame(t(w4) %*% t(x_tr_4)))\n\n# plot polynomial regression on training set\nplt_tr_4 &lt;- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_4\n\n\n\n\n\n\n\n# compute average training error\nerrors_tr_4 &lt;- (eq_tr_4 - y_tr_mat)**2\nerr_avg_tr_4 &lt;- colSums(errors_tr_4) / length(errors_tr_4)\nerr_avg_tr_4\n\n     y_tr \n0.8833612 \n\n# add columns to testing features\nx_te_4 &lt;- as.matrix(x_te_1[, 1]**4)\nx_te_4 &lt;- cbind(x_te_4, x_te_3)\n\n# equation using same weight vector from training data\neq_te_4 &lt;- t(as.data.frame(t(w4) %*% t(x_te_4)))\n\n# plot polynomial regression on test set\nplt_te_4 &lt;- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_4\n\n\n\n\n\n\n\n# compute average testing error using same weight vector from training data\nerrors_te_4 &lt;- (eq_te_4 - y_te_mat)**2\nerr_avg_te_4 &lt;- colSums(errors_te_4) / length(errors_te_4)\nerr_avg_te_4\n\n   y_tr \n3.05486 \n\n# store average errors\nerrs &lt;- rbind(errs, order4 = c(err_avg_tr_4, err_avg_te_4))\nerrs\n\n        training   testing\norder1 2.1431122  9.973294\norder2 1.9847596 12.163477\norder3 0.8850264  2.715822\norder4 0.8833612  3.054860\n\n\nUsing fourth order polynomial regression, our training error has slightly improved, however, the testing error has slightly gotten worse, by a larger amount. While it is close to the third order polynomial regression, overall the data has become slightly overfitted, and so the best model for fitting our data is the third order polynomial regression model.",
    "crumbs": [
      "Home",
      "AI Projects in R",
      "Simple Regression"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/about.html",
    "href": "pages/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nHi my name is Michael and this page is not done.",
    "crumbs": [
      "Home",
      "About"
    ]
  }
]