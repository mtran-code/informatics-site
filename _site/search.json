[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "linreg.html",
    "href": "linreg.html",
    "title": "Linear Regression in R",
    "section": "",
    "text": "Linear and Polynomial Regression\nA\n\n# setup libraries\nlibrary(ggplot2)\n\n# read in first dataset into dataframe\nx_tr <- read.delim(file = \"data/hw1xtr.dat\", header = FALSE, col.names = \"x_tr\")\ny_tr <- read.delim(file = \"data/hw1ytr.dat\", header = FALSE, col.names = \"y_tr\")\ndf_tr <- data.frame(x_tr, y_tr)\n\n# read in second dataset into dataframe\nx_te <- read.delim(file = \"data/hw1xte.dat\", header = FALSE, col.names = \"x_te\")\ny_te <- read.delim(file = \"data/hw1yte.dat\", header = FALSE, col.names = \"y_te\")\ndf_te <- data.frame(x_te, y_te)\n\n# plot training dataset\nplt_tr <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    labs(title = \"Training data\") +\n    theme_light()\nplt_tr\n\n\n\n# plot test dataset\nplt_te <- ggplot(df_te, aes(x = x_te, y = y_te)) +\n    geom_point() +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    labs(title = \"Testing data\") +\n    theme_light()\nplt_te\n\n\n\n\nB\n\n# convert training outputs to matrix\ny_tr_mat <- as.matrix(y_tr)\n\n# add column of 1s to training features\nx_tr_1 <- cbind(x_tr, b = rep(1, length(x_tr)))\nx_tr_1 <- as.matrix(x_tr_1)\n\n# solve for weight vector using training features\nw <- solve(t(x_tr_1) %*% x_tr_1) %*% (t(x_tr_1) %*% y_tr_mat)\n\n# plot linear regression on training set\nplt_tr_1 <- ggplot(data = df_tr, mapping = aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_1\n\n\n\n# compute average training error\neq_tr_1 <- t(as.data.frame(t(w) %*% t(x_tr_1)))\nerrors_tr_1 <- (eq_tr_1 - y_tr_mat)**2\nerr_avg_tr_1 <- colSums(errors_tr_1) / length(errors_tr_1)\nerr_avg_tr_1\n\n    y_tr \n2.287073 \n\n\nThe average error of the training set using the linear regression model is 2.287073.\nC\n\n# convert training outputs to matrix\ny_te_mat <- as.matrix(y_te)\n\n# add column of 1s to testing features\nx_te_1 <- cbind(x_te, b = rep(1, length(x_te)))\nx_te_1 <- as.matrix(x_te_1)\n\n# plot linear regression on test set\nplt_te_1 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        w[1] * x + w[2]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_1\n\n\n\n# compute average test error using same weight vector from training data\neq_te_1 <- t(as.data.frame(t(w) %*% t(x_te_1)))\nerrors_te_1 <- (eq_te_1 - y_te_mat)**2\nerr_avg_te_1 <- colSums(errors_te_1) / length(errors_te_1)\nerr_avg_te_1\n\n    y_tr \n9.427358 \n\n# store average errors:\nerrs <- data.frame(\n    \"training\" = err_avg_tr_1,\n    \"testing\" = err_avg_te_1,\n    row.names = \"order1\"\n)\n\nThe average error of the testing set using the linear regression model is 9.427358.\nD\n\n# add second order polynomial to features\nx_tr_2 <- as.matrix(x_tr_1[, 1]**2)\nx_tr_2 <- cbind(x_tr_2, x_tr_1)\n\n# compute weight vector\nw2 <- solve(t(x_tr_2) %*% x_tr_2) %*% (t(x_tr_2) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_2 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_2\n\n\n\n# compute average training error\neq_tr_2 <- t(as.data.frame(t(w2) %*% t(x_tr_2)))\nerrors_tr_2 <- (eq_tr_2 - y_tr_mat)**2\nerr_avg_tr_2 <- colSums(errors_tr_2) / length(errors_tr_2)\nerr_avg_tr_2\n\n    y_tr \n2.105887 \n\n# add columns to testing features\nx_te_2 <- as.matrix(x_te_1[, 1]**2)\nx_te_2 <- cbind(x_te_2, x_te_1)\n\n# plot polynomial regression on test set\nplt_te_2 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w2[1] * x^2) + (w2[2] * x) + w2[3]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_2\n\n\n\n# compute average testing error using same weight vector from training data\neq_te_2 <- t(as.data.frame(t(w2) %*% t(x_te_2)))\nerrors_te_2 <- (eq_te_2 - y_te_mat)**2\nerr_avg_te_2 <- colSums(errors_te_2) / length(errors_te_2)\nerr_avg_te_2\n\n    y_tr \n11.73039 \n\n# store average errors\nerrs <- rbind(errs, order2 = c(err_avg_tr_2, err_avg_te_2))\nerrs\n\n       training   testing\norder1 2.287073  9.427358\norder2 2.105887 11.730392\n\n\nComparing the training error and test error, this second order polynomial regression model performs worse than the linear model, with a better training fit but a worse testing fit. Thus, the linear regression model is a better fit.\nE\n\n# add third order polynomial to features\nx_tr_3 <- as.matrix(x_tr_1[, 1]**3)\nx_tr_3 <- cbind(x_tr_3, x_tr_2)\n\n# compute weight vector\nw3 <- solve(t(x_tr_3) %*% x_tr_3) %*% (t(x_tr_3) %*% y_tr_mat)\n\n# plot polynomial regression on training set\nplt_tr_3 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_3\n\n\n\n# compute average training error\neq_tr_3 <- t(as.data.frame(t(w3) %*% t(x_tr_3)))\nerrors_tr_3 <- (eq_tr_3 - y_tr_mat)**2\nerr_avg_tr_3 <- colSums(errors_tr_3) / length(errors_tr_3)\nerr_avg_tr_3\n\n     y_tr \n0.8941722 \n\n# add columns to testing features\nx_te_3 <- as.matrix(x_te_1[, 1]**3)\nx_te_3 <- cbind(x_te_3, x_te_2)\n\n# plot polynomial regression on test set\nplt_te_3 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w3[1] * x^3) + (w3[2] * x^2) + (w3[3] * x) + w3[4]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_3\n\n\n\n# compute average testing error using same weight vector from training data\neq_te_3 <- t(as.data.frame(t(w3) %*% t(x_te_3)))\nerrors_te_3 <- (eq_te_3 - y_te_mat)**2\nerr_avg_te_3 <- colSums(errors_te_3) / length(errors_te_3)\nerr_avg_te_3\n\n    y_tr \n2.483334 \n\n# store average errors\nerrs <- rbind(errs, order3 = c(err_avg_tr_3, err_avg_te_3))\nerrs\n\n        training   testing\norder1 2.2870726  9.427358\norder2 2.1058871 11.730392\norder3 0.8941722  2.483334\n\n\nThis time, the training error has improved much more than with the second order model. In addition, the testing error has also dramatically improved, even better than our original best linear regression model. Overall, this third order polynomial regression is a better fit than both the linear and second order models.\nF\n\n# add fourth order polynomial to features\nx_tr_4 <- as.matrix(x_tr_1[, 1]**4)\nx_tr_4 <- cbind(x_tr_4, x_tr_3)\n\n# compute weight vector\nw4 <- solve(t(x_tr_4) %*% x_tr_4) %*% (t(x_tr_4) %*% y_tr_mat)\neq_tr_4 <- t(as.data.frame(t(w4) %*% t(x_tr_4)))\n\n# plot polynomial regression on training set\nplt_tr_4 <- ggplot(df_tr, aes(x = x_tr, y = y_tr)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_tr_4\n\n\n\n# compute average training error\nerrors_tr_4 <- (eq_tr_4 - y_tr_mat)**2\nerr_avg_tr_4 <- colSums(errors_tr_4) / length(errors_tr_4)\nerr_avg_tr_4\n\n     y_tr \n0.8897772 \n\n# add columns to testing features\nx_te_4 <- as.matrix(x_te_1[, 1]**4)\nx_te_4 <- cbind(x_te_4, x_te_3)\n\n# equation using same weight vector from training data\neq_te_4 <- t(as.data.frame(t(w4) %*% t(x_te_4)))\n\n# plot polynomial regression on test set\nplt_te_4 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_4\n\n\n\n# compute average testing error using same weight vector from training data\nerrors_te_4 <- (eq_te_4 - y_te_mat)**2\nerr_avg_te_4 <- colSums(errors_te_4) / length(errors_te_4)\nerr_avg_te_4\n\n    y_tr \n3.011983 \n\n# store average errors\nerrs <- rbind(errs, order4 = c(err_avg_tr_4, err_avg_te_4))\nerrs\n\n        training   testing\norder1 2.2870726  9.427358\norder2 2.1058871 11.730392\norder3 0.8941722  2.483334\norder4 0.8897772  3.011983\n\n\nUsing fourth order polynomial regression, our training error has slightly improved, however, the testing error has slightly gotten worse, by a larger amount. While it is close to the third order polynomial regression, overall the data has become slightly overfitted, and so the best model for fitting our data is the third order polynomial regression model.\n\n\nRegularization and Cross-Validation\nA\n\n# create identity matrix with 0 at position (1, 1)\ni_hat <- diag(nrow(w4))\ni_hat[1, 1] <- 0\n\n# function calculating training error in terms of lambda\nl2_error_tr <- function(lambda) {\n    l <- 0.5 * norm(x_tr_4 %*% w4 - y_tr_mat)^2 +\n        lambda / 2 * t(w4) %*% i_hat %*% w4\n    return(l)\n}\n# function calculating testing error in terms of lambda\nl2_error_te <- function(lambda) {\n    l <- 0.5 * norm(x_te_4 %*% w4 - y_te_mat)^2 +\n        lambda / 2 * t(w4) %*% i_hat %*% w4\n    return(l)\n}\n\n# calculate values based on given lambdas\nlambdas <- c(0.01, 0.05, 0.1, 0.5, 1, 100, 10^6)\nl2_tr <- sapply(lambdas, l2_error_tr)\nl2_te <- sapply(lambdas, l2_error_te)\n\n# save to dataframe\ndf_l2 <- data.frame(lambdas, l2_tr, l2_te)\ndf_l2\n\n  lambdas        l2_tr        l2_te\n1   1e-02 4.492262e+02 3.395960e+02\n2   5e-02 4.552134e+02 3.455832e+02\n3   1e-01 4.626975e+02 3.530673e+02\n4   5e-01 5.225699e+02 4.129397e+02\n5   1e+00 5.974104e+02 4.877802e+02\n6   1e+02 1.541583e+04 1.530620e+04\n7   1e+06 1.496815e+08 1.496814e+08\n\n# plot data\nplt_reg <- ggplot() +\n    geom_point(\n        data = df_l2,\n        mapping = aes(x = lambdas, y = l2_tr, color = \"training\")\n    ) +\n    stat_function(fun = l2_error_tr, mapping = aes(color = \"training\")) +\n    geom_point(\n        data = df_l2,\n        mapping = aes(x = lambdas, y = l2_te, color = \"testing\"),\n    ) +\n    stat_function(fun = l2_error_te, mapping = aes(color = \"testing\")) +\n    scale_color_manual(\n        name = \"Dataset\",\n        values = c(\n            training = \"red\",\n            testing = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    scale_y_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"log10 error\") +\n    theme_light()\nplt_reg\n\nWarning in lambda/2 * t(w4) %*% i_hat %*% w4: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\nWarning in lambda/2 * t(w4) %*% i_hat %*% w4: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nThe smallest lambda value, 0.01, seems to minimize the l2-normalized loss for both the training and testing data with the minimized lambda value. At smaller lambda values, the testing error is greater than the training data, but as they get larger this difference is less visible.\nB\n\n# function of training weight in terms of lambda\nl2_w_tr <- function(lambda) {\n    w <- solve(t(x_tr_4) %*% x_tr_4 + lambda * i_hat) %*% t(x_tr_4) %*% y_tr_mat\n    return(w)\n}\n# compute weights based on lambdas\nw_tr <- sapply(lambdas, l2_w_tr)\n\n# create dataframe to plot data\ncols <- c(\"lambdas\", \"x4.term\", \"x3.term\", \"x2.term\", \"x.term\", \"bias.term\")\ndf_w_tr <- data.frame(lambdas, t(w_tr))\ncolnames(df_w_tr) <- cols\n\n# plot training weights\nplt_w_tr <- ggplot() +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x4.term, color = \"x4\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x3.term, color = \"x3\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x2.term, color = \"x2\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = x.term, color = \"x\")\n    ) +\n    geom_line(\n        data = df_w_tr,\n        mapping = aes(x = lambdas, y = bias.term, color = \"bias\")\n    ) +\n    scale_color_manual(\n        name = \"weight parameter\",\n        values = c(\n            x4 = \"red\",\n            x3 = \"orange\",\n            x2 = \"purple\",\n            x = \"darkgreen\",\n            bias = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"weight parameter value\") +\n    theme_light()\nplt_w_tr\n\n\n\n# function of testing weight in terms of lambda\nl2_w_te <- function(lambda) {\n    w <- solve(t(x_te_4) %*% x_te_4 + lambda * i_hat) %*% t(x_te_4) %*% y_te_mat\n    return(w)\n}\n\n# compute testing weights\nw_te <- sapply(lambdas, l2_w_te)\n\n# create dataframe to plot data\ndf_w_te <- data.frame(lambdas, t(w_te))\ncolnames(df_w_te) <- cols\n\n# plot testing weights in terms of lambda\nplt_w_te <- ggplot() +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x4.term, color = \"x4\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x3.term, color = \"x3\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x2.term, color = \"x2\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = x.term, color = \"x\")\n    ) +\n    geom_line(\n        data = df_w_te,\n        mapping = aes(x = lambdas, y = bias.term, color = \"bias\")\n    ) +\n    scale_color_manual(\n        name = \"weight parameter\",\n        values = c(\n            x4 = \"red\",\n            x3 = \"orange\",\n            x2 = \"purple\",\n            x = \"darkgreen\",\n            bias = \"blue\"\n        ),\n    ) +\n    scale_x_log10() +\n    xlab(\"log10 lambda\") +\n    ylab(\"weight parameter value\") +\n    theme_light()\nplt_w_te\n\n\n\n\nNote: Data is plotted as discrete based on specifed lambda values.\nC\n\n# store training data into single dataframe\ntrain <- data.frame(x_tr_4, y_tr_mat)\n# shuffle the rows randomly\ntrain <- train[sample(nrow(train)), ]\n# split the data into 5 equal groups of 8, in a list\ngroups <- cut(seq_len(nrow(train)), breaks = 5, labels = FALSE)\ntrain_groups <- split(train, groups)\ntrain_groups\n\n$`1`\n            V1         V2        V3      x_tr b      y_tr\n19  8.26173568  4.8730792 2.8743235 1.6953830 1 12.292687\n39 14.53461078  7.4439347 3.8124285 1.9525441 1 11.138174\n32  0.07417691  0.1421352 0.2723544 0.5218758 1  7.173304\n15  2.82195459  2.1772711 1.6798674 1.2960970 1  8.971721\n30  5.54477864  3.6133760 2.3547354 1.5345147 1 11.422151\n7  66.32192507 23.2403596 8.1438274 2.8537392 1 12.890953\n26  6.53221887  4.0859735 2.5558206 1.5986934 1 10.889961\n22 19.56219377  9.3017180 4.4229169 2.1030732 1 13.165072\n\n$`2`\n             V1           V2         V3      x_tr b      y_tr\n33  0.000369890  0.002667193 0.01923253 0.1386814 1  3.135994\n5   0.981891879  0.986387934 0.99090458 0.9954419 1 10.105849\n17 67.612345853 23.578680804 8.22267267 2.8675203 1 14.140329\n23 98.374028945 31.236354562 9.91836826 3.1493441 1 16.567816\n37  0.136884991  0.225043707 0.36997972 0.6082596 1  7.236291\n2  96.987811138 30.905649045 9.84823899 3.1381904 1 15.289011\n14  0.125402680  0.210731818 0.35412241 0.5950819 1  7.904996\n18  0.004591374  0.017638311 0.06775968 0.2603069 1  3.994465\n\n$`3`\n             V1           V2          V3      x_tr b      y_tr\n36 8.032714e+01 26.831609385  8.96254086 2.9937503 1 14.940644\n21 1.937759e-04  0.001642384  0.01392034 0.1179845 1  2.794276\n27 1.415590e+02 41.039591401 11.89785537 3.4493268 1 18.209443\n11 1.466429e+02 42.140123037 12.10962049 3.4798880 1 17.327588\n12 1.318950e+01  6.921039493  3.63173556 1.9057113 1 10.604819\n24 1.112240e+02 34.249074744 10.54627833 3.2475034 1 16.648354\n10 4.159386e-02  0.092102602  0.20394572 0.4516035 1  7.328440\n4  2.930107e+00  2.239559755  1.71175565 1.3083408 1  9.349968\n\n$`4`\n             V1           V2           V3        x_tr b      y_tr\n9  6.523413e+01 2.295388e+01 8.076765e+00 2.841965000 1 13.414665\n28 5.325306e-09 6.233880e-07 7.297469e-05 0.008542523 1  2.277592\n35 2.045838e+01 9.619522e+00 4.523094e+00 2.126756800 1  9.804237\n25 3.480056e+00 2.547943e+00 1.865491e+00 1.365829700 1 10.988057\n40 2.088532e+01 9.769690e+00 4.570046e+00 2.137766500 1 13.405720\n6  1.103977e+02 3.405806e+01 1.050703e+01 3.241454900 1 14.950901\n1  4.279414e-01 5.291005e-01 6.541723e-01 0.808809170 1 10.073261\n13 1.062850e-02 3.310199e-02 1.030946e-01 0.321083520 1  5.425063\n\n$`5`\n             V1           V2           V3       x_tr b      y_tr\n29 2.086426e-01 3.087111e-01  0.456774142 0.67585068 1  9.142000\n16 5.337705e-07 1.974767e-05  0.000730596 0.02702954 1  1.609707\n3  1.403843e+02 4.078392e+01 11.848389738 3.44214900 1 19.023864\n34 6.213827e+01 2.213194e+01  7.882783409 2.80762950 1 14.299533\n31 3.316681e+01 1.382063e+01  5.759063558 2.39980490 1 11.915797\n20 1.074394e+02 3.337127e+01 10.365298728 3.21951840 1 13.296842\n8  4.896759e+01 1.851107e+01  6.997684571 2.64531370 1 11.362217\n38 5.519668e-03 2.025045e-02  0.074294465 0.27257011 1  5.415621\n\n# loop for each run\nfor (run in 1:5) {\n    # designate datasets\n    validation_set <- train_groups[[run]]\n    training_set <- do.call(rbind, train_groups[-run])\n    x <- as.matrix(training_set[1:5])\n    y <- as.matrix(training_set[6])\n\n    # compute weight vector\n    w <- solve(t(x) %*% x) %*% (t(x) %*% y)\n\n    # create identity matrix with 0 at position (1, 1)\n    i_hat <- diag(nrow(w))\n    i_hat[1, 1] <- 0\n\n    # function calculating validation error in terms of lambda\n    l2_error <- function(lambda) {\n        l <- 0.5 * norm(\n            as.matrix(validation_set[1:5]) %*% w - as.matrix(validation_set[6])\n        )^2 + lambda / 2 * t(w) %*% i_hat %*% w\n        return(l)\n    }\n\n    # plot data\n    plt <- ggplot() +\n        stat_function(fun = l2_error) +\n        scale_x_log10() +\n        labs(\n            title = paste0(\"Run \", run),\n            x = \"log10 lambda\",\n            y = \"error\",\n        ) +\n        ylim(0, 2000) +\n        theme_light()\n    print(plt)\n}\n\nWarning in lambda/2 * t(w) %*% i_hat %*% w: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nWarning in lambda/2 * t(w) %*% i_hat %*% w: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nWarning in lambda/2 * t(w) %*% i_hat %*% w: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nWarning in lambda/2 * t(w) %*% i_hat %*% w: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nWarning in lambda/2 * t(w) %*% i_hat %*% w: Recycling array of length 1 in vector-array arithmetic is deprecated.\n  Use c() or as.vector() instead.\n\n\n\n\n\nWe can see slight variation in each figure, but the trend remains the same: the error has a positive correlation with lambda, thus minimizing lambda seems to be the best fit for our data. This is the same trend seen previously.\n\n# plot 4th order polynomial regression on test set\nplt_te_4 <- ggplot(data = df_te, mapping = aes(x = x_te, y = y_te)) +\n    geom_point() +\n    stat_function(fun = function(x) {\n        (w4[1] * x^4) + (w4[2] * x^3) + (w4[3] * x^2) + (w4[4] * x) + w4[5]\n    }) +\n    xlim(0, 4) +\n    ylim(0, 30) +\n    theme_light()\nplt_te_4\n\n\n\n\nThe best fit 4th order polynomial regression plot.\n\n\nAddition\nResponse to Question 1d, in Refreshing Mathematics\n\nlibrary(rgl)\n\n# Define A and B matrices\nA <- matrix(c(2, -2, -2, 3), nrow = 2)\nB <- matrix(c(2, -1, -1, 2), nrow = 2)\n\n# Define the function to plot\nf <- function(w) {\n  return(sum(diag(B %*% w %*% t(w) %*% A)))\n}\n\n# Generate a grid of (x, y) points\nx <- seq(-1, 1, length.out = 50)\ny <- seq(-1, 1, length.out = 50)\ngrid <- expand.grid(x, y)\n\n# Evaluate the function at each (x, y) point\nz <- apply(grid, 1, function(w) f(as.matrix(w)))\n\n# Create the 3D plot\nz <- matrix(z, nrow = length(x), ncol = length(y), byrow = TRUE)\npersp3d(x, y, z, col = heat.colors(1000))"
  },
  {
    "objectID": "faces.html",
    "href": "faces.html",
    "title": "2. Eigenfaces in R",
    "section": "",
    "text": "# Spatial data rasterization package\nremotes::install_github(\"rspatial/terra\", configure.args = \"--with-proj-lib=$(brew --prefix)/lib/\")\n\nSkipping install of 'terra' from a github remote, the SHA1 (b7757c30) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(\"terra\")\n\nterra 1.7.24\n\n# Raw \"faces.dat\" data as dataframe. Each row is one face, and the 4096 columns\n# each represent a pixel value in the face, in a 64 x 64 image.\nfacedata_raw <- read.delim(file = \"data/faces.dat\", header = FALSE, sep = \"\")\n\n# Creates an image of a face given it's 4096 pixel values\ncreate_face <- function(values) {\n    # New SpatRaster object with correct face parameters\n    face_rast <- rast(nrows = 64, ncols = 64)\n    # Set extent\n    ext(face_rast) <- c(0, 64, 0, 64)\n    # Set pixel values\n    values(face_rast) <- values\n    # Return face rotated to upright orientation\n    return(trans(face_rast))\n}\n\n# Displays a face in grayscale colour\nshow_face_grayscale <- function(rast) {\n    par(xaxt = \"n\", yaxt = \"n\")\n    cols <- gray(seq(0, 1, length = 256))\n    image(rast, col = cols)\n}\n\n# Displays a face using a divergent colour scale\nshow_face_divergent <- function(rast) {\n    par(xaxt = \"n\", yaxt = \"n\")\n    plot(rast)\n}\n\n\n\n\n\n\n# Vector of pixel values of 100th face\nvector_100 <- t(facedata_raw[100, ])\n\n# Rasterize and show face\nface_raw_100 <- create_face(vector_100)\nshow_face_grayscale(face_raw_100)\ntitle(\"100th Face\")\n\n\n\n\n\n\n\n\n\n# The mean vector of face pixel values\nvector_mean <- as.matrix(colMeans(facedata_raw))\n# Rasterize and show mean face\nface_mean <- create_face(vector_mean)\nshow_face_grayscale(face_mean)\ntitle(\"Mean Face\")\n\n\n\n# Face data with the mean face vector removed\nfaces_removed <- facedata_raw\n# Remove mean vector from each face\nfor (i in seq_len(nrow(faces_removed))) {\n    face <- faces_removed[i, ]\n    face_new <- face - t(vector_mean)\n    faces_removed[i, ] <- face_new\n}\n\n# Vector of pixel values of 100th face, with the mean removed\nvector_removed_100 <- t(faces_removed[100, ])\n\n# Rasterize and show face\nface_removed_100 <- create_face(vector_removed_100)\npar(mfrow = c(1, 2))\nshow_face_grayscale(face_removed_100)\nshow_face_divergent(face_removed_100)\n\n\n\n\nThe 100th face with the mean face values subtracted, rasterized. On the left is a grayscale image; on the right is colourized using a divergent colour scale to better visualize negative values. \n\n\n\n\n# Principal component analysis of faces with mean removed\npca <- prcomp(faces_removed, center = FALSE)\n\n# Principal components from PCA\npcs <- pca$x\n# Eigenvectors from PCA\nevecs <- pca$rotation\n# Eigenvalues from PCA\nevals <- pca$sdev^2\n# Proportion of variance from PCA\npv <- evals / sum(evals)\n# Cumulative proportion of variance from PCA\npv_cum <- cumsum(evals) / sum(evals)\n\n# Plot scree plots of Eigenvalues\nplot(\n    pv * 100,\n    type = \"b\",\n    ylim = c(0, 25),\n    xlab = \"Eigenvalues\",\n    ylab = \"Proportion of variance (percentage)\",\n    main = \"Proportion explained by Eigenvalues\"\n)\n\n\n\nplot(\n    pv_cum * 100,\n    type = \"b\",\n    ylim = c(0, 100),\n    xlab = \"Eigenvalues\",\n    ylab = \"Cumulative Proportion of variance (percentage)\",\n    main = \"Cumulative Proportion of variance explained by Eigenvalues\"\n)\n\n\n\n\nEigenvalues plotted against proportion of variance explained. The first plot shows individual Eigenvalue variance percentages sorted in descending order, whilst the second plot shows the cumulative proportion for each descending Eigenvalue. \n\n\n\n\n# Last (400th) Eigenvalue\neval_400 <- evals[400]\neval_400\n\n[1] 1.797793e-25\n\n\nThe 400th Eigenvalue shown above is equal to zero (shown as a very small number due to the limitations of “numerics” in R, essentially equivalent to zero). This can be expected because Eigenvalues represent the variance in the values based on each principal component (PC). Since they are sorted in descending order, we can see that the first few PCs, especially the first one, contribute a very large amount to the variance of the face data. Conversely, the Eigenvalues drop off rapidly until our final Eigenvalue of zero. An Eigenvalue of zero means that the PC associated with it does not contribute to the variance of the data much at all, and the first 399 values have already captured the variability. \n\n\n\n\n# Threshold to keep Eigenvalues explaining at least this amount of variance\nthreshold <- 0.95\n\n# Show cumulative variance with threshold marked\npar(mfrow = c(1, 1))\nplot(\n    pv_cum * 100,\n    type = \"b\",\n    ylim = c(0, 100),\n    xlab = \"Eigenvalues\",\n    ylab = \"Cumulative Proportion of variance (percentage)\",\n    main = \"A: Threshold of 0.95 visualized\"\n)\nabline(h = 95, lty = \"dashed\", col = \"red\")\n\n\n\n# Number of Eigenvalues/PCs to keep based on threshold\nkeep <- min(which(pv_cum > threshold))\nkeep\n\n[1] 123\n\n# Show cumulative variance with threshold marked, with cropped x-axis\nplot(\n    pv_cum * 100,\n    type = \"b\",\n    ylim = c(0, 100),\n    xlim = c(0, 140),\n    xlab = \"Eigenvalues (cropped)\",\n    ylab = \"Cumulative Proportion of variance (percentage)\",\n    main = \"B: Threshold of 0.95 visualized for first 140 Eigenvalues\"\n)\nabline(h = 95, lty = \"dashed\", col = \"red\")\n\n\n\n\nTo account for most of the variance, a threshold can be set to determine the number of prinicpal components (PCs) that account for this proportion of variance. For example, with a threshold of 50%, or 0.50, you would determine at which number of PCs the cumulative proportion of variance explained reaches 50% of the total.\nI set the variance at 0.95, and determined the number of Eigenvalues to keep based on it. The first plot (A) shows the cumulative proportion of variance associated with each Eigenvalue, and we can see a red dashed line visualizing the cumulative variance proportion of 0.95. After determining the intersect of the scree plot and the threshold, I zoomed into the plot to better see individual points on the cumulative scree plot. 95% of the variance is explained by the first 123 PCs, which already removes 277 less necessary PCs. This way, we can still account for most of the variance at 95%, whilst cutting the number of PCs down to under a third of the size. \n\n\n\n\n# Defines how many top Eigenvectors to take (i.e. the top n values)\nn_top <- 5\n\n# The top 5 Eigenvectors (PCs)\nevecs_topn <- evecs[, 1:n_top]\n\n# Iterate and show top n Eigenvectors\nfor (i in seq_len(n_top)) {\n    # Current Eigenvector\n    evec <- evecs_topn[, i]\n    # Rasterize and show the Eigenvector visualization\n    par(mfrow = c(1, 2))\n    face_evec <- create_face(evec)\n    show_face_grayscale(face_evec)\n    title(paste0(\"Eigenvector \", i))\n    show_face_divergent(face_evec)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince the Eigenvector values are relative and not in standard 8-bit colour format, they are visualized above as both grayscale and colourized using diverging colour scales. \n\n\n\n\n# List of number of principal components to use in reconstructions\nn_pcs <- c(10, 100, 200, 399)\n\n# nth face to be reconstructed\nn_face <- 100\n\n# Rasterize mean face, raw face, and face with mean removed for reference\npar(mfrow = c(1, 3))\nshow_face_grayscale(face_mean)\ntitle(\"Mean Face\")\nvector_raw_n <- t(facedata_raw[n_face, ])\nface_raw_n <- create_face(vector_raw_n)\nshow_face_grayscale(face_raw_n)\ntitle(\"Raw Face Image\")\n# Face vector of 4096 pixel values with the mean removed for reconstruction\nvector_removed_n <- t(faces_removed[n_face, ])\nface_removed_n <- create_face(vector_removed_n)\nshow_face_grayscale(face_removed_n)\ntitle(\"Mean Removed\")\n\n\n\n# Iterate and reconstruct specifed face with specifed PCs\npar(mfrow = c(1, length(n_pcs) / 2))\nfor (n in seq_len(length(n_pcs))) {\n    # The top n selected principal components\n    evecs_selected <- as.matrix(evecs[, 1:n_pcs[n]])\n    # Projection of face with mean subtracted onto selected Eigenvectors\n    proj <- t(vector_removed_n) %*% evecs_selected\n    # Reconstructed vector from projection and Eigenvectors with mean added back\n    vector_reconstr <- t(proj %*% t(evecs_selected)) + vector_mean\n\n    # Rasterize and show reconstructed face\n    face_reconstr <- create_face(vector_reconstr)\n    show_face_grayscale(face_reconstr)\n    title(paste0(n_pcs[n], \" PCs\"))\n}\n\n\n\n\n\n\n\nWe can see clearly that the more principal components used in the reconstruction, the better the reconstruction is, and the closer it is to the original raw face. With only the top 10 principal components, the face reconstruction looks very similar to the mean. With 399 principal components, the reconstruction is virtually identical to the raw."
  },
  {
    "objectID": "filters.html",
    "href": "filters.html",
    "title": "3. Edge and Corner Detection in R",
    "section": "",
    "text": "# load libraries\nsuppressPackageStartupMessages({\n    library(imager)\n    library(ggplot2)\n    library(patchwork)\n})\n\n# load image from file into R as a cimg object\nimg <- load.image(\"data/image1.png\")\nclass(img)\n\n[1] \"cimg\"         \"imager_array\" \"numeric\"     \n\n\nUsing the imager library, all cimg objects are represented as 4-dimensional arrays. The dimensions represent: width, height, depth, and colour. In our case, our input image is already in grayscale, and we are only concerned with each pixel value, thus the dimensions for depth and colour are largely ignored. Nonetheless, we have to initialize our image as well as all subsequent filters and images in our code to contain all four dimensions so that they will be able to convolve.\n\n# see dimensions of image\ndim(img)\n\n[1] 276 182   1   1\n\n# view summary of image data\nimg\n\nImage. Width: 276 pix Height: 182 pix Depth: 1 Colour channels: 1 \n\n\n\n# helper function applies convolution to an image given a filter\napply_convolution <- function(image, filter) {\n    # Get dimensions of the image and the filter\n    img_dim <- dim(image)\n    filt_dim <- dim(filter)\n\n    # Define padding size\n    padding <- floor(filt_dim[1] / 2)\n\n    # initialize padded image as empty array\n    img_padded <- array(0, dim = c(\n        img_dim[1] + 2 * padding, img_dim[2] + 2 * padding, img_dim[3], img_dim[4]\n    ))\n\n    # populate padded image array with image pixels\n    img_padded[\n        (1 + padding):(img_dim[1] + padding), # width\n        (1 + padding):(img_dim[2] + padding), , # height\n    ] <- image\n\n    # initialize convolved image as empty array\n    img_convolved <- array(0, dim = img_dim)\n\n    # iterate each pixel in image and convolve with filter\n    for (i in 1:img_dim[1]) {\n        for (j in 1:img_dim[2]) {\n            pixel_convolved <- 0\n            for (k in 1:filt_dim[1]) {\n                for (l in 1:filt_dim[2]) {\n                    pixel_convolved <- pixel_convolved +\n                        filter[k, l, , ] *\n                            img_padded[i + k - 1, j + l - 1, , ]\n                }\n            }\n            img_convolved[i, j, , ] <- pixel_convolved\n        }\n    }\n\n    return(as.cimg(img_convolved))\n}\n\n\n# helper function displays images, given an image and title\nplot_img <- function(img, title = \"\") {\n    # convert image to dataframe\n    img_df <- as.data.frame(img)\n\n    # generate plot of dataframe\n    plot <- ggplot(img_df, aes(x, y)) + # nolint\n        # define rasterization\n        geom_raster(aes(fill = value), show.legend = FALSE) + # nolint\n        # define color scale (grayscale)\n        scale_fill_gradient(low = \"black\", high = \"white\") +\n        # fix pixel ratio / aspect ratio\n        coord_fixed() +\n        # reverse y scale (image orientation)\n        scale_y_reverse() +\n        # set title\n        ggtitle(title) +\n        # remove all graphical details from plot besides image\n        theme_void()\n\n    return(plot)\n}\n\n# display the original image\nplot_img(img, \"Original Image\")\n\n\n\n\n\n\n\n\n\n\n\n\nImplement convolution process of smoothing Image 1 with a 5 x 5 Gaussian Filter with σ = 1 and 2, plot the corresponding output images.\n\n# function applies a kxk Gaussian filter to an image with a sigma value\napply_gaussian <- function(img, ksize, sigma) {\n    # initialize x and y vectors around 0, e.g. [-2, -1, 0, 1, 2]\n    center <- floor(ksize / 2)\n    x <- y <- seq(-center, center, 1)\n\n    # Gaussian function\n    gauss <- outer(x, y, function(x, y) {\n        exp(-(x^2 + y^2) / (2 * sigma^2))\n    })\n\n    # initialize kernel as empty array\n    kernel <- array(0, dim = c(ksize, ksize, 1, 1))\n    # populate kernel with Gaussian filter values\n    kernel[, , 1, 1] <- gauss\n\n    # display kernel values\n    print(\"Resulting kernel:\")\n    print(kernel[, , 1, 1])\n\n    # convolve image with kernel\n    img_flt <- apply_convolution(img, kernel)\n    return(img_flt)\n}\n\n# apply Gaussian filter to image with sigma = 1\nimg_gauss_1 <- apply_gaussian(img, ksize = 5, sigma = 1)\n\n[1] \"Resulting kernel:\"\n           [,1]      [,2]      [,3]      [,4]       [,5]\n[1,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n[2,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[3,] 0.13533528 0.6065307 1.0000000 0.6065307 0.13533528\n[4,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[5,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n\n# apply Gaussian filter to image with sigma = 2\nimg_gauss_2 <- apply_gaussian(img, ksize = 5, sigma = 2)\n\n[1] \"Resulting kernel:\"\n          [,1]      [,2]      [,3]      [,4]      [,5]\n[1,] 0.3678794 0.5352614 0.6065307 0.5352614 0.3678794\n[2,] 0.5352614 0.7788008 0.8824969 0.7788008 0.5352614\n[3,] 0.6065307 0.8824969 1.0000000 0.8824969 0.6065307\n[4,] 0.5352614 0.7788008 0.8824969 0.7788008 0.5352614\n[5,] 0.3678794 0.5352614 0.6065307 0.5352614 0.3678794\n\n# show resulting images side by side\nplot_img(img_gauss_1, \"Sigma = 1\") + plot_img(img_gauss_2, \"Sigma = 2\")\n\n\n\n\n\n\n\n\nWe can see that the blurring effect from the Gaussian filter is stronger with a greater sigma value.\n\n\n\n\nImplement convolution process of convolving a 3 x 3 Sobel filters (Sx and Sy) with the output images you obtained in step a. Plot the outputs of this process.\n\n# define Sobel kernel Sx\nsobel_x <- array(\n    c(\n        -1, 0, 1,\n        -2, 0, 2,\n        -1, 0, 1\n    ),\n    dim = c(3, 3, 1, 1)\n)\n\n# define Sobel kernel Sy\nsobel_y <- array(\n    c(\n        -1, -2, -1,\n        0, 0, 0,\n        1, 2, 1\n    ),\n    dim = c(3, 3, 1, 1)\n)\n\nApplying Sobel filters to Image with Gaussian filter where σ = 1:\n\n# apply Sobel filters to first Gaussian filter output\nimg_g1_sx <- apply_convolution(img_gauss_1, sobel_x) # x filter\nimg_g1_sy <- apply_convolution(img_gauss_1, sobel_y) # y filter\n\n# show resulting images side by side\nplot_img(img_g1_sx, \"Sigma = 1, Sobel x\") +\n    plot_img(img_g1_sy, \"Sigma = 1, Sobel y\")\n\n\n\n\n\n\n\n\nApplying Sobel filters to Image with Gaussian filter where σ = 2:\n\n# apply Sobel filters to second Gaussian filter output\nimg_g2_sx <- apply_convolution(img_gauss_2, sobel_x) # x filter\nimg_g2_sy <- apply_convolution(img_gauss_2, sobel_y) # y filter\n\n# Show resulting images side by side\nplot_img(img_g2_sx, \"Sigma = 2, Sobel x\") +\n    plot_img(img_g2_sy, \"Sigma = 2, Sobel y\")\n\n\n\n\n\n\n\n\nEdge detection is a bit sharper with the lower sigma value, however this comes at the cost of increased noise.\n\n\n\n\nImplement convolution process of convolving Image 1 with \\(\\frac{\\partial G}{\\partial x}\\) and \\(\\frac{\\partial G}{\\partial y}\\) filters (5 x 5 filters and for σ = 1 and 2).\n\n# function applies first partial x-derivative Gaussian filter to an image\napply_d_gaussian_x <- function(img, ksize, sigma) {\n    # initialize x and y vectors around 0, e.g. [-2, -1, 0, 1, 2]\n    center <- floor(ksize / 2)\n    x <- y <- seq(-center, center, 1)\n\n    # first derivative of Gaussian function wrt x\n    dgauss <- outer(x, y, function(x, y) {\n        (-x / sigma^2) * exp(-(x^2 + y^2) / (2 * sigma^2))\n    })\n\n    # initialize kernel as empty array\n    kernel <- array(0, dim = c(ksize, ksize, 1, 1))\n    # populate kernel with x-derivative Gaussian filter values\n    kernel[, , 1, 1] <- dgauss\n\n    # display kernel values\n    print(\"Resulting kernel:\")\n    print(kernel[, , 1, 1])\n\n    # convolve image with kernel window\n    img_flt <- apply_convolution(img, kernel)\n    return(img_flt)\n}\n\n# function applies first partial y-derivative Gaussian filter to an image\napply_d_gaussian_y <- function(img, ksize, sigma) {\n    # initialize x and y vectors around 0, e.g. [-2, -1, 0, 1, 2]\n    center <- floor(ksize / 2)\n    x <- y <- seq(-center, center, 1)\n\n    # first derivative of Gaussian function wrt y\n    dgauss <- outer(x, y, function(x, y) {\n        (-y / sigma^2) * exp(-(x^2 + y^2) / (2 * sigma^2))\n    })\n\n    # initialize kernel as empty array\n    kernel <- array(0, dim = c(ksize, ksize, 1, 1))\n    # populate kernel with y-derivative Gaussian filter values\n    kernel[, , 1, 1] <- dgauss\n\n    # display kernel values\n    print(\"Resulting kernel:\")\n    print(kernel[, , 1, 1])\n\n    # convolve image with kernel window\n    img_flt <- apply_convolution(img, kernel)\n    return(img_flt)\n}\n\n# apply derivative Gaussian filters to Image with sigma = 1\nimg_dg1_x <- apply_d_gaussian_x(img, ksize = 5, sigma = 1) # x-derivative\n\n[1] \"Resulting kernel:\"\n            [,1]       [,2]       [,3]       [,4]        [,5]\n[1,]  0.03663128  0.1641700  0.2706706  0.1641700  0.03663128\n[2,]  0.08208500  0.3678794  0.6065307  0.3678794  0.08208500\n[3,]  0.00000000  0.0000000  0.0000000  0.0000000  0.00000000\n[4,] -0.08208500 -0.3678794 -0.6065307 -0.3678794 -0.08208500\n[5,] -0.03663128 -0.1641700 -0.2706706 -0.1641700 -0.03663128\n\nimg_dg1_y <- apply_d_gaussian_y(img, ksize = 5, sigma = 1) # y-derivative\n\n[1] \"Resulting kernel:\"\n           [,1]      [,2] [,3]       [,4]        [,5]\n[1,] 0.03663128 0.0820850    0 -0.0820850 -0.03663128\n[2,] 0.16417000 0.3678794    0 -0.3678794 -0.16417000\n[3,] 0.27067057 0.6065307    0 -0.6065307 -0.27067057\n[4,] 0.16417000 0.3678794    0 -0.3678794 -0.16417000\n[5,] 0.03663128 0.0820850    0 -0.0820850 -0.03663128\n\n# apply derivative Gaussian filters to Image with sigma = 2\nimg_dg2_x <- apply_d_gaussian_x(img, ksize = 5, sigma = 2) # x-derivative\n\n[1] \"Resulting kernel:\"\n           [,1]       [,2]       [,3]       [,4]       [,5]\n[1,]  0.1839397  0.2676307  0.3032653  0.2676307  0.1839397\n[2,]  0.1338154  0.1947002  0.2206242  0.1947002  0.1338154\n[3,]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000\n[4,] -0.1338154 -0.1947002 -0.2206242 -0.1947002 -0.1338154\n[5,] -0.1839397 -0.2676307 -0.3032653 -0.2676307 -0.1839397\n\nimg_dg2_y <- apply_d_gaussian_y(img, ksize = 5, sigma = 2) # y-derivative\n\n[1] \"Resulting kernel:\"\n          [,1]      [,2] [,3]       [,4]       [,5]\n[1,] 0.1839397 0.1338154    0 -0.1338154 -0.1839397\n[2,] 0.2676307 0.1947002    0 -0.1947002 -0.2676307\n[3,] 0.3032653 0.2206242    0 -0.2206242 -0.3032653\n[4,] 0.2676307 0.1947002    0 -0.1947002 -0.2676307\n[5,] 0.1839397 0.1338154    0 -0.1338154 -0.1839397\n\n# Show resulting images\nplot_img(img_dg1_x, \"Sigma = 1, Derivative Gaussian x\") +\n    plot_img(img_dg1_y, \"Sigma = 1, Derivative Gaussian y\")\n\n\n\n\n\n\n\nplot_img(img_dg2_x, \"Sigma = 2, Derivative Gaussian x\") +\n    plot_img(img_dg2_y, \"Sigma = 2, Derivative Gaussian y\")\n\n\n\n\n\n\n\n\n\n\n\nStep b utilized edge detection using the Sobel filter for x and y, and step c utilized the first derivative Gaussian filter for x and y. We can plot a review of the output images below:\n\n# plot images generated from sigma = 1\nplot_img(img_g1_sx, \"Sigma = 1, Sobel x\") +\n    plot_img(img_g1_sy, \"Sigma = 1, Sobel y\") +\n    plot_img(img_dg1_x, \"Sigma = 1, Derivative Gaussian x\") +\n    plot_img(img_dg1_y, \"Sigma = 1, Derivative Gaussian y\") +\n    plot_layout(ncol = 2)\n\n\n\n\n\n\n\n# plot images generated from sigma = 2\nplot_img(img_g2_sx, \"Sigma = 2, Sobel x\") +\n    plot_img(img_g2_sy, \"Sigma = 2, Sobel y\") +\n    plot_img(img_dg2_x, \"Sigma = 2, Derivative Gaussian x\") +\n    plot_img(img_dg2_y, \"Sigma = 2, Derivative Gaussian y\") +\n    plot_layout(ncol = 2)\n\n\n\n\n\n\n\n\nFrom the rasterizations above, we can see that both filters are effective at their main goal of edge detection. On it’s own, the Sobel filters is known to be sensitive to noise, and so we first filtered the image using Gaussian filters before applying the Sobel filters. The first derivative Gaussian filter does not have as much sensitivity. One noticeable difference is the opposite visual effects the filters have; the edges that appear to be protruding in the Sobel filter, appear to be sunken in the derivative Gaussian filter. This likely results from how the two filters emphasize the orientation of edges, with opposite negative and positive values in the resulting image. Finally, another difference observed between the two filters is that the edges are lighter and thicker with the Sobel filters, whilst the edges are darker and sharper with the derivative Gaussian filter (albeit to a slim extent). This may be attributed to the extra step of pre-filtering the image with a Gaussian filter before applying the Sobel filter, which adds an extra level of blur. On the other hand, the derivative Gaussian filter both removes noise and detects edges in one filter, which removes an extra step needed, also resulting in less of a blurring effect."
  },
  {
    "objectID": "filters.html#setup-define-parameters-used-in-harris-corner-detection",
    "href": "filters.html#setup-define-parameters-used-in-harris-corner-detection",
    "title": "3. Edge and Corner Detection in R",
    "section": "Setup: define parameters used in Harris Corner Detection",
    "text": "Setup: define parameters used in Harris Corner Detection\n\n# window size for Gaussian filter (w x w)\nw <- 5\n# sigma for Gaussian filter\nsigma <- 1\n\n# empirically determined constant used in corner response calculation\nk <- 0.04"
  },
  {
    "objectID": "filters.html#step-1.-spatial-derivative-calculation",
    "href": "filters.html#step-1.-spatial-derivative-calculation",
    "title": "3. Edge and Corner Detection in R",
    "section": "Step 1. Spatial derivative calculation",
    "text": "Step 1. Spatial derivative calculation\n\n# apply Sobel filters to Image\nI_x <- apply_convolution(img, sobel_x)\nI_y <- apply_convolution(img, sobel_y)\n\n# compute products of derivatives\nI_xx <- I_x^2\nI_yy <- I_y^2\nI_xy <- I_x * I_y"
  },
  {
    "objectID": "filters.html#step-2.-structure-tensor-setup-m",
    "href": "filters.html#step-2.-structure-tensor-setup-m",
    "title": "3. Edge and Corner Detection in R",
    "section": "Step 2. Structure tensor setup (M)",
    "text": "Step 2. Structure tensor setup (M)\n\n# compute sums of products of derivatives\nS_xx <- apply_gaussian(I_xx, w, sigma)\n\n[1] \"Resulting kernel:\"\n           [,1]      [,2]      [,3]      [,4]       [,5]\n[1,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n[2,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[3,] 0.13533528 0.6065307 1.0000000 0.6065307 0.13533528\n[4,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[5,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n\nS_yy <- apply_gaussian(I_yy, w, sigma)\n\n[1] \"Resulting kernel:\"\n           [,1]      [,2]      [,3]      [,4]       [,5]\n[1,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n[2,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[3,] 0.13533528 0.6065307 1.0000000 0.6065307 0.13533528\n[4,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[5,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n\nS_xy <- apply_gaussian(I_xy, w, sigma)\n\n[1] \"Resulting kernel:\"\n           [,1]      [,2]      [,3]      [,4]       [,5]\n[1,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n[2,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[3,] 0.13533528 0.6065307 1.0000000 0.6065307 0.13533528\n[4,] 0.08208500 0.3678794 0.6065307 0.3678794 0.08208500\n[5,] 0.01831564 0.0820850 0.1353353 0.0820850 0.01831564\n\n# note: see Edge Detection (a) for implementation of apply_gaussian()\n\n# initialize empty matrix M to store sums\nM <- array(0, dim = c(nrow(img), ncol(img), 2, 2))\n\n# populate matrix M with sums\nfor (i in seq_len(nrow(img))) {\n    for (j in seq_len(ncol(img))) {\n        # insert 2x2 matrix for each pixel\n        M[i, j, , ] <- matrix(\n            c(\n                S_xx[i, j, , ], S_xy[i, j, , ],\n                S_xy[i, j, , ], S_yy[i, j, , ]\n            ),\n            nrow = 2\n        )\n    }\n}"
  },
  {
    "objectID": "filters.html#step-3.-corner-response-calculation",
    "href": "filters.html#step-3.-corner-response-calculation",
    "title": "3. Edge and Corner Detection in R",
    "section": "Step 3. Corner response calculation",
    "text": "Step 3. Corner response calculation\n\n# initialize empty matrix R to store measure of corner response\nR <- array(0, dim = c(nrow(img), ncol(img), 1, 1))\n\n# populate matrix R with corner responses per pixel\nfor (i in seq_len(nrow(img))) {\n    for (j in seq_len(ncol(img))) {\n        # extract matrix M for current pixel\n        M_ij <- matrix(M[i, j, , ], nrow = 2, ncol = 2)\n\n        # compute eigenvalues\n        eigenM <- eigen(M_ij)\n        lambda1 <- eigenM$values[1] # first eigenvalue of current M\n        lambda2 <- eigenM$values[2] # second eigenvalue of current M\n\n        # compute determinant and trace using eigenvalues\n        detM <- lambda1 * lambda2\n        traceM <- lambda1 + lambda2\n\n        # compute corner response and add to matrix R\n        R[i, j, , ] <- detM - k * traceM^2\n    }\n}\n\n# plot results\ncorner_response_map <- as.cimg(R)\nplot_img(corner_response_map, \"Corner response map\")\n\n\n\n\n\n\n\n\nIn our corner response map, we can see that white areas correspond to corners, and black areas correspond to edges."
  },
  {
    "objectID": "filters.html#step-4.-non-maximum-suppression",
    "href": "filters.html#step-4.-non-maximum-suppression",
    "title": "3. Edge and Corner Detection in R",
    "section": "Step 4. Non-maximum suppression",
    "text": "Step 4. Non-maximum suppression\n\n# view summary of our corner responses\nsummary(R)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-49.03308  -0.01485   0.00000  -0.02343   0.00059 202.64260 \n\n# view histogram of our corner responses\nhist(R, breaks = 100, xlab = \"Corner response value\")\n\n\n\n\n\n\n\n\nFrom our summary, we can see the the values are distributed around a center of approximately 0. Since greater positive values correspond to a higher corner detection response, I can set a threshold of 0 to capture any pixels with a positive value. In the histogram, we can see that the vast majority of pixels have a value of around 0, while very few have values over 50, or even 25. We can increase the threshold up depending on how sharply we want to define where corners are detected.\n\n# corner R value threshold\nthreshold <- 0\n\n# keep only values meeting threshold, setting otherwise to 0 (black)\nR_thr <- R\nR_thr[R_thr < threshold] <- 0\n\n# plot results\nnon_max_suppression <- as.cimg(R_thr)\nplot_img(non_max_suppression, \"Non-max suppression, threshold = 0\")\n\n\n\n\n\n\n\n\nIn this image, only corners are displayed in white, while all other non-corner pixels are left out of the image (i.e. are black). We can see that the Harris corner detection highlights the corners of each window of the building, as well as corners of the roof and building itself.\nFor comparison’s sake, we can increase the threshold to only include pixels with a much higher positive corner response:\n\n# increased corner R value threshold\nthreshold <- 80\n\n# plot results\nR_thr <- R\nR_thr[R_thr < threshold] <- 0\nnon_max_suppression <- as.cimg(R_thr)\nplot_img(non_max_suppression, \"Non-max suppression, threshold = 80\")\n\n\n\n\n\n\n\n\nHere our results are much sharper and excludes possible corners brought about by noise."
  },
  {
    "objectID": "alexnet.html",
    "href": "alexnet.html",
    "title": "Michael Tran",
    "section": "",
    "text": "CS4442 Aritificial Intelligence II\nMichael Tran\n\n\nUse one of the deep learning frameworks (Pytorch, Tensorflow, Keras, …) and load the pre-trained AlexNet model. Input these 156 images to the pre-trained AlexNet model and extract feature maps/activations from Conv 1, 2, 3, 4, 5, fc6, and fc7 layers. Vectorize the activations corresponding to each image. You should have a vector of activations per image per layer mentioned above. (20 points)\n\n# Load imports\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torchvision.models as models\nfrom matplotlib.colors import ListedColormap\nfrom PIL import Image\nfrom sklearn.manifold import MDS\nfrom torchvision import transforms\nfrom torchvision.models import AlexNet_Weights\n\n\n# Load pre-trained AlexNet\nalexnet = models.alexnet(weights=AlexNet_Weights.DEFAULT)\n\n# Define transformation for the input images\ntransformer = transforms.Compose(\n    [\n        transforms.Resize(256),\n        transforms.CenterCrop(227),\n        transforms.ToTensor(),\n        transforms.Normalize(\n            mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n        ),\n    ]\n)\n\n\n# Load the input images and preprocess them using the transformer\ninput_images = []\n\nfor i in range(1, 157):\n    img_path = \"./Image Set/{:03d}.jpg\".format(i)\n    img = Image.open(img_path)\n    preprocessed_img = transformer(img)\n    input_images.append(preprocessed_img)\n\n\n# Convert the input images into a batch and feed it to the model\ninput_batch = torch.stack(input_images)\n\nwith torch.no_grad():\n    outputs = alexnet(input_batch)\n\n\n# Extract feature maps/activations from Conv 1, 2, 3, 4, 5, fc6, and fc7 layers\nactivations = {}\nx = input_batch\nfor name, module in alexnet.features._modules.items():\n    x = module(x)\n    if name in [\"0\", \"3\", \"6\", \"8\", \"10\"]:\n        activations[name] = x\n\nx = x.view(x.size(0), -1)\nfor name, module in alexnet.classifier._modules.items():\n    x = module(x)\n    if name in [\"0\", \"3\"]:\n        activations[name] = x\n\n# Add activations for fc6, fc7\nfc6_activation = alexnet.classifier[0](x)\nfc7_activation = alexnet.classifier[3](fc6_activation)\nactivations[\"fc6\"] = fc6_activation\nactivations[\"fc7\"] = fc7_activation\n\n# Vectorize each of the activations tensors\nfor layer_name, tensor in activations.items():\n    layer_activation = tensor.detach().numpy().reshape(tensor.shape[0], -1)\n    activations[layer_name] = layer_activation\n\n\n\n\nCreate a representational dissimilarity matrix (RDM) which is 156 x156 matrix, each row and column in this matrix is indexed by one of the images in the image set and each element in the matrix is the Euclidean distance between the activation vectors of the corresponding images you extracted in Step 1. (30 points)\n\nRDMs = []\nfor layer_name, layer_activation in activations.items():\n    # compute the RDM for each layer\n    layer_RDM = 1 - np.corrcoef(layer_activation)\n    RDMs.append(layer_RDM)\n\n\n\n\nPlot the RDM for each layer (Conv 1, 2, 3, 4, 5, fc6, fc7), and their corresponding multidimensional scaling (MDS) visualization in 2 Dimension. The class labels you should use for the MDS plotting includes images 1 to 28 are Animals, 29-64 are Objects, 65 to 100 are scenes, 101 to 124 are human activities, 125 to 156 are faces. (30 points)\n\n# define a list of layer names to use for plotting\nlayer_names = [\"Conv1\", \"Conv2\", \"Conv3\", \"Conv4\", \"Conv5\", \"fc6\", \"fc7\"]\n\n# plot the RDMs for each layer\nfor i, layer_name in enumerate(layer_names):\n    plt.figure(figsize=(8, 8))\n    plt.imshow(RDMs[i], cmap=\"magma\")\n    plt.title(f\"{layer_name} RDM\")\n    plt.colorbar()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# RDM is a 156x156 numpy array containing the RDM for each layer\n\n# define class labels for each image\nclass_labels = (\n    [\"Animal\"] * 28\n    + [\"Object\"] * 36\n    + [\"Scene\"] * 36\n    + [\"Activity\"] * 24\n    + [\"Face\"] * 32\n)\n\n# Define colors for each class label\ncolors = {\n    \"Animal\": \"red\",\n    \"Object\": \"blue\",\n    \"Scene\": \"green\",\n    \"Activity\": \"purple\",\n    \"Face\": \"orange\",\n}\n\n# Define colour mapping (to integer values)\nclass_colors = [colors[label] for label in class_labels]\ncmap = ListedColormap(class_colors, len(set(class_labels)))\nclass_mapping = {\n    \"Animal\": 0,\n    \"Object\": 1,\n    \"Scene\": 2,\n    \"Activity\": 3,\n    \"Face\": 4,\n}\nclass_labels_int = [class_mapping[label] for label in class_labels]\n\n# create a plot for each layer\nfor i, layer_name in enumerate(layer_names):\n    # apply MDS to the RDM to obtain 2D coordinates for each image\n    embedding = MDS(\n        n_components=2, dissimilarity=\"precomputed\", normalized_stress=False\n    ).fit_transform(RDMs[i])\n\n    # plot the 2D coordinates using class labels for color coding\n    fig, ax = plt.subplots(figsize=(10, 8))\n    scatter = ax.scatter(\n        embedding[:, 0], embedding[:, 1], c=class_labels_int, cmap=cmap\n    )\n    plt.title(f\"{layer_name} MDS Visualization\")\n\n    # create a custom legend with the class labels\n    handles, labels = scatter.legend_elements()\n    legend_labels = [\n        list(class_mapping.keys())[\n            list(class_mapping.values()).index(\n                int(label.strip(\"$\\\\mathdefault{}$\"))\n            )\n        ]\n        for label in labels\n    ]\n    # move legend to right of plot\n    legend = ax.legend(\n        handles,\n        legend_labels,\n        loc=\"center left\",\n        bbox_to_anchor=(1.05, 0.5),\n        title=\"Class Labels\",\n    )\n\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\nIn this assignment, I inputted 156 different images of JPEG format into the pre-trained AlexNet model in order to map and visualize the image recognition of the labels (Animal, Object, Scene, Activity, Face). The AlexNet model was developed by Krizhevsky et al in 2012 as part of the ImageNet challenge to implement object recognition models. It is a convolutional neural network (CNN) consisting of five convolutional layers as well as additional fully connected layers for classification. The input dataset consists of 156 JPEG images of varying dimensions, in order of their respective class labels: 28 Animal, 36 Object, 36 Scene, 24 Activity, and 32 Face.\nMethods\nTo access the pre-trained AlexNet model and work with a deep learning models, I used the PyTorch deep learning framework, an open source library available in Python developed by Facebook’s AI research team. PyTorch has pre-trained models available and accessible within the package, including AlexNet pre-trained with weights. I imported this and also prepared a transformer to take in the varying JPEG inputs and transform them to the standard ImageNet specifications. This involves resizing them to the correct image dimensions taken by the model, 227 x 227 pixels, and normalizing the pixel values to the mean and standard deviation of the ImageNet dataset. Next I looped over each of my input images, loaded them into Python using the PIL package, and applied my transformer to each of them. Now that I had my batch of images, I could feed them to the model.\nFrom the results I extracted feature maps / activations from each of the layers Conv1, Conv2, Conv3, Conv4, Conv5, fc6, and fc7. I stored these activations in a dictionary named activations and vectorized each of them. I also created a representational dissimilarity matrix (RDM) named RDMs from the vectors that represents the Euclidian distances between them.\nResults\nUsing the matplotlib library in Python, I plotted my results from the model, beginning with the RDM matrix. I generated RDM plots of each of the layers mentioned previously. This gave me seven RDM plots, representing the similarity betwwen the images in each layer of the CNN. Using the colour scale, we can observe pairwise similarities between the inputs. Along the diagonal is a noticable black line, and this is because when comparing an image to itself, it is expected that there is zero dissimilarity. Using the colour scale, I can observe a high level of dissimilarity between images as the plots seem to be generally light in colour, which corresponds to a high disimilarity. There is a noticeable exception to this in the bottom right corner, where the last subset of images show a darker square, representing a closer similarity to each other. The last subset of images in the input dataset represents the group Faces, so it is interesting to observe that these images are relatively closer to one another than the rest of the images. Otherwise, we can also see slight clustering of class labels through colour differences, creating a faint checkered-like pattern. Each of the squares would represent a class label, as naturally images belonging to the same group are expected to have a similar level of closeness to one another than with other groups. As we plot more layers, the RDM plots show overall less dissimilarity.\nNext, I plotted the results of the model using Multidimenional Scaling (MDS) in order to visualize and compare the similarity between images of the CNN. By plotting for each layer, I could explore how the MDS representations change as they are processed through each layer of the CNN. The overall trend seen through the resulting plots is that each layer had distict patterns, with the first layers likely grouping based on low-level features whilst the latter layers group based on high-level semantic features corresponding to the categories, i.e. Animals, Scenes, Faces, etc. Looking at the colour legend, we can see that the clustering of group improves with each layer, where images of the same class label are closer to one another. In particular, the cluster corresponding to the Face label are very tightly clustered even from the first layer. This complements our findings from the RDM plots, where we noticed that the Face images have a relatively higher similarity to one another compared to the rest of the images. We can even see this cluster form a slight gap between itself and the rest of the images in the MDS plots, highlighting their difference as a group.\nConclusion\nOverall, the results of the assignment provide insight on how images are processed in a convolutional neural network, namely AlexNet. By visualizing the similarity between images in different layers, we gain a better understanding of how the network classifies and recognizes different groups such as objects, scenes, or faces. We also explore how different class labels of images compare to one another in similarity and image recognition efficiency."
  }
]